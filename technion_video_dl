#!/bin/bash
# Default value for params
user=
pass=
video_server=https://video.technion.ac.il
cookie_file=cookie

# We always use curl with these args
CURL="curl -s -b $cookie_file"

function usage {
    echo Usage: $0 COURSE_PAGE [FIRST_VIDEO_NUM [LAST_VIDEO_NUM]]
}

base_url=$1
first_video=$2
last_video=$3
# Check url format
if [[ $base_url != https://video.technion.ac.il/Courses/*.html ]]; then
	echo 'Error: please insert valid course url (e.g https://video.technion.ac.il/Courses/PhysMech.html).'
    usage
	exit
fi;

# Get username and password from user
if [[ -z $user ]]; then
    read -p "Username: " user
fi;
if [[ -z $pass ]]; then
    read -s -p "Password: " pass
fi;

# Check url validity
$CURL $base_url >/dev/null
if [[ $? -ne 0 ]]; then
	echo 'Error: please insert exists course url (e.g http://video.technion.ac.il/Courses/PhysMech.html).'
	exit 1
fi;

# Calculate the number of all the videos
videos_count=`$CURL $base_url | grep -a movies/rtsp -c`
[ ! "$first_video" ] && first_video=1
[ ! "$last_video" ] && last_video=$video_count

# Validate video indexes
if ! [[ "$first_video" =~ ^[0-9]+$ ]]  || (( $first_video == 0 )) ; then
    echo 'Error: the second & third parameter can be only positive numbers.'
    exit 1
fi
if (( $first_video > $videos_count )) ; then
    echo Error: there are just $videos_count videos_count, begin index $first_video is too high
    exit 1
fi

if ! [[ "$last_video" =~ ^[0-9]+$ ]] || (( $last_video == 0 )) ; then
    echo 'Error: the second & third parameter can be only positive numbers.'
    exit 1
fi
if  (( $last_video > $videos_count )) ; then
    echo Error: there is just $videos_count videos_count, end index $last_video is too high.
    exit 1
fi
if (( $last_video < $first_video )) ; then
    echo Error: end index $last_video is higher than begin index $first_video
    exit 1
fi

# Let's rock!
$CURL $base_url | grep -a movies/rtsp | cut -d"'" -f4 | sed -n "$first_video,$last_video p" | \
    while read video; do
        video_name=`echo $video| cut -d"/" -f6`
        video_url=`$CURL $video_server$video| grep -a 'window.location="rtsp' | cut -d"\"" -f2 ` 
        echo Downloading $video_name, please wait...
        msdl -s2 "$video_url" -o "$video_name"
    done
